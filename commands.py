"""Bot supported commands."""
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from callbacks import FormStates, ClientFindChoice, ClientMenuChoice, ClientMakeRecommendationsChoice
from config import Config
from db import get_recommendations, setup_rec_data, update_client_by_id, get_client_by_name
from keyboards import get_start_keyboard, get_clients_keyboard, get_food_protocols_keyboard, \
    recommendations_keyboard_1, recommendations_keyboard_2, get_menu_settings_keyboard, get_clients_settings_keyboard, \
    get_set_recommendations_keyboard
from utils import make_gpt_request


async def send_welcome_keyboard(message: Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_start_keyboard())


async def send_clients_keyboard(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:', reply_markup=get_clients_keyboard())


async def get_recommendations_1(message: Message):
    recommendations = get_recommendations(title_name='–í–∏—Ç–∞–º–∏–Ω—ã')
    msg = ''
    for i in recommendations:
        msg += f'{i["id"]}. {i["name"]}\n'

    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ <b>–í–∏—Ç–∞–º–∏–Ω–∞–º</b>:\n\n" + msg,
                         reply_markup=recommendations_keyboard_2([]))

    await FormStates.RECOMMENDATION_2.set()


async def choose_user(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    if state_data['client'] == 'find_client':
        client_data = get_client_by_name(message.text)
        await ClientFindChoice.choosing_user.set()
        await state.update_data(chosen_user=client_data)

        if client_data['recommendations']:
            recommendations = setup_rec_data(client_data['recommendations'])
        else:
            recommendations = '–ù–µ—Ç'

        await message.answer(f'üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏: {client_data["full_name"]}\n\n'
                             f'<b>Email:</b> {client_data["email"]}\n'
                             f'<b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–∏—Ç–∞–Ω–∏—è:</b> {client_data["food_protocol_name"]}\n'
                             f'<b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {client_data["allergic"]}\n'
                             f'<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> \n{recommendations}')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=get_clients_settings_keyboard())
    elif state_data['client'] == 'upd_menu':
        await message.answer(f"–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. \n\n {message.text} ")
        await state.update_data(menu=message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=get_menu_settings_keyboard())
    elif state_data['client'] == 'find_menu':
        client_data = get_client_by_name(message.text)
        await ClientMenuChoice.choosing_user.set()
        await state.update_data(chosen_user=client_data)
        if client_data['food_protocol_id'] is None:
            await message.answer('‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–∏—Ç–∞–Ω–∏—è ‚ùóÔ∏è')
            await state.finish()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=get_start_keyboard())

        else:
            temp_msg = await message.answer('.. –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é ..')
            if client_data['allergic'] in Config.NO_ANSWER:
                msg = make_gpt_request(client_data['food_protocol_id'], None)
                await state.update_data(menu=msg)
                await temp_msg.edit_text(msg)
                await message.answer(f'–ú–µ–Ω—é –¥–ª—è <b>{client_data["full_name"]}</b> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ!')
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=get_menu_settings_keyboard())

            else:
                msg = make_gpt_request(client_data['food_protocol_id'], client_data['allergic'])
                await state.update_data(menu=msg)
                await temp_msg.edit_text(msg)
                await message.answer(f'–ú–µ–Ω—é –¥–ª—è <b>{client_data["full_name"]}</b> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ!')
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=get_menu_settings_keyboard())
    elif state_data['client'] == 'find_rec':
        client_data = get_client_by_name(message.text)

        await ClientMakeRecommendationsChoice.choosing_user.set()
        await state.update_data(chosen_user=client_data)
        if client_data['recommendations'] is None:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_set_recommendations_keyboard())

        elif len(client_data['recommendations']) > 0:
            if client_data['recommendations']:
                rec = setup_rec_data(client_data['recommendations'])
            else:
                rec = '–ù–µ—Ç'
            await message.answer(f'üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏: {client_data["full_name"]}\n\n{rec}')
            await state.finish()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_start_keyboard())
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=get_set_recommendations_keyboard())
    elif state_data['client'] == 'edit_allergic':
        data = await state.get_data()
        data['chosen_user']['allergic'] = message.text
        await state.update_data(**data)

        state_data = await state.get_data()
        update_client_by_id(state_data['chosen_user'])
        if state_data['chosen_user']['recommendations']:
            rec = setup_rec_data(state_data['chosen_user']['recommendations'])
        else:
            rec = '–ù–µ—Ç'
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã! \n\n'
                             f'<b>–§–ò–û:</b> {state_data["chosen_user"]["full_name"]}\n'
                             f'<b>Email:</b> {state_data["chosen_user"]["email"]}\n'
                             f'<b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–∏—Ç–∞–Ω–∏—è:</b> {state_data["chosen_user"]["food_protocol_name"]}\n'
                             f'<b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {state_data["chosen_user"]["allergic"]}\n'
                             f'<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> \n{rec}')
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:', reply_markup=get_clients_keyboard())

    elif state_data['client'] == 'edit_email':
        data = await state.get_data()
        data['chosen_user']['email'] = message.text
        await state.update_data(**data)

        state_data = await state.get_data()
        update_client_by_id(state_data['chosen_user'])
        if state_data['chosen_user']['recommendations']:
            rec = setup_rec_data(state_data['chosen_user']['recommendations'])
        else:
            rec = '–ù–µ—Ç'
        await message.answer(f'Email –æ–±–Ω–æ–≤–ª–µ–Ω! \n\n'
                             f'<b>–§–ò–û:</b> {state_data["chosen_user"]["full_name"]}\n'
                             f'<b>Email:</b> {state_data["chosen_user"]["email"]}\n'
                             f'<b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–∏—Ç–∞–Ω–∏—è:</b> {state_data["chosen_user"]["food_protocol_name"]}\n'
                             f'<b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {state_data["chosen_user"]["allergic"]}\n'
                             f'<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> \n{rec}')
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:', reply_markup=get_clients_keyboard())
    elif state_data['client'] == 'edit_name':
        data = await state.get_data()
        data['chosen_user']['full_name'] = message.text
        await state.update_data(**data)

        state_data = await state.get_data()
        update_client_by_id(state_data['chosen_user'])
        if state_data['chosen_user']['recommendations']:
            rec = setup_rec_data(state_data['chosen_user']['recommendations'])
        else:
            rec = '–ù–µ—Ç'
        await message.answer(f'–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω—ã! \n\n'
                             f'<b>–§–ò–û:</b> {state_data["chosen_user"]["full_name"]}\n'
                             f'<b>Email:</b> {state_data["chosen_user"]["email"]}\n'
                             f'<b>–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–∏—Ç–∞–Ω–∏—è:</b> {state_data["chosen_user"]["food_protocol_name"]}\n'
                             f'<b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {state_data["chosen_user"]["allergic"]}\n'
                             f'<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> \n{rec}')
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:', reply_markup=get_clients_keyboard())
    elif state_data['client'] == 'add_name':
        await FormStates.NAME.set()
        await state.update_data(full_name=message.text)
        await state.update_data(client='add_email')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ email:')
    elif state_data['client'] == 'add_email':
        await state.update_data(email=message.text)
        await state.update_data(client='add_allergic')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–∏—Ç–∞–Ω–∏—è:', reply_markup=get_food_protocols_keyboard())
        await FormStates.FOOD_PROTOCOL.set()
    elif state_data['client'] == 'add_allergic':
        await state.update_data(allergies=message.text)
        recommendations = get_recommendations(title_name='–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º')
        msg = ''
        for i in recommendations['–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º']:
            msg += f'{str(i["id"])}. {i["name"]}\n'
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ <b>–†–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º</b>:\n\n" + msg,
                             reply_markup=recommendations_keyboard_1([]))
        await FormStates.RECOMMENDATION_1.set()


def register_commands(dp: Dispatcher):
    """Register bot commands."""
    dp.register_message_handler(send_welcome_keyboard, commands=['start'], state='*')
    dp.register_message_handler(send_clients_keyboard, commands=['clients'])
    dp.register_message_handler(send_clients_keyboard, commands=['add_client'])
    dp.register_message_handler(send_clients_keyboard, commands=['find_client'])
    dp.register_message_handler(send_clients_keyboard, commands=['find_client'])
    dp.register_message_handler(choose_user, lambda message: True, state="*")
    dp.register_message_handler(get_recommendations_1, state=FormStates.RECOMMENDATION_1)
